import { S as SvelteComponentDev, i as init, s as safe_not_equal, e as element, t as text, a as space, c as claim_element, b as children, d as claim_text, f as detach, g as attr, h as add_location, D as listen, j as insert, k as append, w as set_data, n as noop, x as empty, E as set_style, r as transition_out, C as check_outros, q as transition_in, F as create_out_transition, B as group_outros, G as add_render_callback, H as create_in_transition, m as mount_component, u as destroy_component } from './chunk.1f1ec905.js';
import { f as fade } from './chunk.62ee5756.js';

/* src/components/ResearchInput.svelte generated by Svelte v3.6.7 */

const file = "src/components/ResearchInput.svelte";

function create_fragment(ctx) {
	var div, h2, t0, t1, img, t2, t3_value = ctx.m.x, t3, t4, t5_value = ctx.m.y, t5, dispose;

	return {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Move mouse around page");
			t1 = space();
			img = element("img");
			t2 = text(" The mouse position is ");
			t3 = text(t3_value);
			t4 = text(" x ");
			t5 = text(t5_value);
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			h2 = claim_element(div_nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t0 = claim_text(h2_nodes, "Move mouse around page");
			h2_nodes.forEach(detach);
			t1 = claim_text(div_nodes, "\n    ");

			img = claim_element(div_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			t2 = claim_text(div_nodes, " The mouse position is ");
			t3 = claim_text(div_nodes, t3_value);
			t4 = claim_text(div_nodes, " x ");
			t5 = claim_text(div_nodes, t5_value);
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h2, "class", "svelte-yo52x0");
			add_location(h2, file, 31, 4, 410);
			attr(img, "src", src);
			attr(img, "alt", "Mesosphere homepage");
			attr(img, "class", "svelte-yo52x0");
			add_location(img, file, 32, 4, 446);
			attr(div, "class", "svelte-yo52x0");
			add_location(div, file, 30, 0, 369);
			dispose = listen(div, "mousemove", ctx.handleMousemove);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, h2);
			append(h2, t0);
			append(div, t1);
			append(div, img);
			append(div, t2);
			append(div, t3);
			append(div, t4);
			append(div, t5);
		},

		p: function update(changed, ctx) {
			if ((changed.m) && t3_value !== (t3_value = ctx.m.x)) {
				set_data(t3, t3_value);
			}

			if ((changed.m) && t5_value !== (t5_value = ctx.m.y)) {
				set_data(t5, t5_value);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}

			dispose();
		}
	};
}

let src = 'homepage.png';

function instance($$self, $$props, $$invalidate) {
	let m = {
        x: 0,
        y: 0
    };

    function handleMousemove(event) {
        m.x = event.clientX; $$invalidate('m', m);
        m.y = event.clientY; $$invalidate('m', m);
    }

	return { m, handleMousemove };
}

class ResearchInput extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

/* src/components/ResearchOutput.svelte generated by Svelte v3.6.7 */

const file$1 = "src/components/ResearchOutput.svelte";

function create_fragment$1(ctx) {
	var div, h2, t0, t1, img;

	return {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Observe user's cursor in real-time");
			t1 = space();
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			h2 = claim_element(div_nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t0 = claim_text(h2_nodes, "Observe user's cursor in real-time");
			h2_nodes.forEach(detach);
			t1 = claim_text(div_nodes, "\n    ");

			img = claim_element(div_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h2, "class", "svelte-yo52x0");
			add_location(h2, file$1, 20, 4, 226);
			attr(img, "src", src$1);
			attr(img, "alt", "Mesosphere homepage");
			attr(img, "class", "svelte-yo52x0");
			add_location(img, file$1, 21, 4, 274);
			attr(div, "class", "svelte-yo52x0");
			add_location(div, file$1, 19, 0, 216);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, h2);
			append(h2, t0);
			append(div, t1);
			append(div, img);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

let src$1 = 'homepage.png';

class ResearchOutput extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$1, safe_not_equal, []);
	}
}

/* src/routes/user-research.svelte generated by Svelte v3.6.7 */

const file$2 = "src/routes/user-research.svelte";

// (152:0) {:else}
function create_else_block(ctx) {
	var div0, div0_intro, div0_outro, t, div1, div1_intro, div1_outro, current;

	var researchinput = new ResearchInput({ $$inline: true });

	var researchoutput = new ResearchOutput({ $$inline: true });

	return {
		c: function create() {
			div0 = element("div");
			researchinput.$$.fragment.c();
			t = space();
			div1 = element("div");
			researchoutput.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { id: true, class: true }, false);
			var div0_nodes = children(div0);

			researchinput.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_text(nodes, "\n");

			div1 = claim_element(nodes, "DIV", { id: true, class: true }, false);
			var div1_nodes = children(div1);

			researchoutput.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div0, "id", "research_input");
			attr(div0, "class", "svelte-sdis7g");
			add_location(div0, file$2, 152, 0, 3817);
			attr(div1, "id", "research_output");
			attr(div1, "class", "svelte-sdis7g");
			add_location(div1, file$2, 155, 0, 3927);
		},

		m: function mount(target, anchor) {
			insert(target, div0, anchor);
			mount_component(researchinput, div0, null);
			insert(target, t, anchor);
			insert(target, div1, anchor);
			mount_component(researchoutput, div1, null);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			transition_in(researchinput.$$.fragment, local);

			add_render_callback(() => {
				if (div0_outro) div0_outro.end(1);
				if (!div0_intro) div0_intro = create_in_transition(div0, fade, {duration: 200});
				div0_intro.start();
			});

			transition_in(researchoutput.$$.fragment, local);

			add_render_callback(() => {
				if (div1_outro) div1_outro.end(1);
				if (!div1_intro) div1_intro = create_in_transition(div1, fade, {duration: 200});
				div1_intro.start();
			});

			current = true;
		},

		o: function outro(local) {
			transition_out(researchinput.$$.fragment, local);
			if (div0_intro) div0_intro.invalidate();

			div0_outro = create_out_transition(div0, fade, {duration: 0});

			transition_out(researchoutput.$$.fragment, local);
			if (div1_intro) div1_intro.invalidate();

			div1_outro = create_out_transition(div1, fade, {duration: 0});

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div0);
			}

			destroy_component(researchinput, );

			if (detaching) {
				if (div0_outro) div0_outro.end();
				detach(t);
				detach(div1);
			}

			destroy_component(researchoutput, );

			if (detaching) {
				if (div1_outro) div1_outro.end();
			}
		}
	};
}

// (147:8) {#if !arch_collapsed}
function create_if_block(ctx) {
	var div, img, div_intro, div_outro, current;

	return {
		c: function create() {
			div = element("div");
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true }, false);
			var div_nodes = children(div);

			img = claim_element(div_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(img, "src", src$2);
			attr(img, "alt", "architecture diagram");
			attr(img, "class", "svelte-sdis7g");
			add_location(img, file$2, 149, 4, 3763);
			attr(div, "id", "architecture__diagram");
			attr(div, "class", "svelte-sdis7g");
			add_location(div, file$2, 148, 0, 3671);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, img);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, fade, {duration: 200});
				div_intro.start();
			});

			current = true;
		},

		o: function outro(local) {
			if (div_intro) div_intro.invalidate();

			div_outro = create_out_transition(div, fade, {duration: 0});

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
				if (div_outro) div_outro.end();
			}
		}
	};
}

function create_fragment$2(ctx) {
	var div, h1, t0, t1, span, button, t2_value = ctx.arch_collapsed ? "+" : "-", t2, button_intro, button_outro, t3, current_block_type_index, if_block, if_block_anchor, current, dispose;

	var if_block_creators = [
		create_if_block,
		create_else_block
	];

	var if_blocks = [];

	function select_block_type(ctx) {
		if (!ctx.arch_collapsed) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			t0 = text("Factory Status");
			t1 = space();
			span = element("span");
			button = element("button");
			t2 = text(t2_value);
			t3 = space();
			if_block.c();
			if_block_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			h1 = claim_element(div_nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Factory Status");
			h1_nodes.forEach(detach);
			div_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n");

			span = claim_element(nodes, "SPAN", { style: true }, false);
			var span_nodes = children(span);

			button = claim_element(span_nodes, "BUTTON", { id: true, class: true }, false);
			var button_nodes = children(button);

			t2 = claim_text(button_nodes, t2_value);
			button_nodes.forEach(detach);
			span_nodes.forEach(detach);
			t3 = claim_text(nodes, " ");
			if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			attr(h1, "class", "svelte-sdis7g");
			add_location(h1, file$2, 140, 4, 3358);
			attr(div, "class", "header svelte-sdis7g");
			add_location(div, file$2, 139, 0, 3333);
			attr(button, "id", "architecture__collapse__button");
			attr(button, "class", "svelte-sdis7g");
			add_location(button, file$2, 143, 0, 3456);
			set_style(span, "position", "relative");
			set_style(span, "grid-row", "2");
			set_style(span, "grid-column", "1 /2");
			add_location(span, file$2, 142, 0, 3389);
			dispose = listen(button, "click", ctx.handle_collapse_click);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, h1);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, span, anchor);
			append(span, button);
			append(button, t2);
			insert(target, t3, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.arch_collapsed) && t2_value !== (t2_value = ctx.arch_collapsed ? "+" : "-")) {
				set_data(t2, t2_value);
			}

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},

		i: function intro(local) {
			if (current) return;
			add_render_callback(() => {
				if (button_outro) button_outro.end(1);
				if (!button_intro) button_intro = create_in_transition(button, fade, {duration: 200});
				button_intro.start();
			});

			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			if (button_intro) button_intro.invalidate();

			button_outro = create_out_transition(button, fade, {duration: 0});

			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
				detach(t1);
				detach(span);
				if (button_outro) button_outro.end();
				detach(t3);
			}

			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}

			dispose();
		}
	};
}

let src$2 = '2019_07_19-arch-diagram.svg';

function instance$1($$self, $$props, $$invalidate) {
	
    let arch_collapsed = false;

    function handle_collapse_click(e) {
        $$invalidate('arch_collapsed', arch_collapsed = !arch_collapsed);
    }

	return { arch_collapsed, handle_collapse_click };
}

class User_research extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$2, safe_not_equal, []);
	}
}

export default User_research;
